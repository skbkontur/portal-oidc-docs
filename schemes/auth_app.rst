.. _`RFC Client Credentials Grant`: https://datatracker.ietf.org/doc/html/rfc6749#section-4.4
.. _`Контур.Интегратор`: https://integrations.kontur.ru/


Аутентификация и авторизация приложения в продуктах Контура
===========================================================

Данный сценарий предполагает взаимодействие между сервисами, аутентификацию и авторизацию вашего приложения, а не пользователя. Например, когда вашему приложению требуется автоматически выполнять действия в API Контура.

Чтобы взаимодействовать с сервисами Контура требуется:

1. Зарегистрировать приложение в сервисе Контур.Интегратор. Это требуется для взаимодействия с сервисами Контура.
2. Получить Access Token у OpenID Провайдера.

Получение токена доступа для приложения
---------------------------------------

см. в `RFC Client Credentials Grant`_

Регистрация приложения в сервисе Контур.Интегратор
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. image:: /_static/cc_registration.png
    :width: 700 px
    

1. Интегратор регистрирует своё приложение в сервисе `Контур.Интегратор`_. В сервисе в правом верхнем углу нажмите на кнопку **Создать приложение**. 
2. Контур.Интегратор возвращает APIKey = ``client_secret`` и идентификатор для приложения ``client_id``.

Алгоритм получения токена доступа для приложения
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. image:: /_static/cc_access_token.png   

1. Приложение аутентифицируется на OpenID Провайдере.  

.. rubric:: Параметры запроса

.. |br| raw:: html

    <br />

.. csv-table:: 
    :header: "Параметр", "Обязательность", "Описание"
    :widths: 9, 10, 30

    "grant_type", "Обязательный", "Способ записи токена. |br| Укажите значение ``client_credentials``"
    "client_id", "Обязательный", "Идентификатор приложения, выдается при регистрации приложения"
    "client_secret", "Обязательный", "APIKey, который выдается при регистрации приложения |br| в сервисе Контур.Интегратор"
    "scope", "Необязательный", "Список прав доступа, которые необходимы приложению |br| в текущей сессии. |br| 
    Разделяются пробелом. |br| |br| Список прав доступов см. в :ref:`Терминах и определениях<rst-murkup-scope>`"

.. warning:: Нельзя указывать scope c информацией о пользователе, вернется ошибка. Можно указать только scope API продуктов Контура. Разрешение на  их использование выдают владельцы API в сервисе Контур.Интегратор.    

**Пример запроса**

::

    POST /connect/token         
    Host: identity.kontur.ru
    Content-Type: application/x-www-form-urlencoded
    
    client_id=yourClientId
    client_secret=yourAPIKey
    scope=example.api
    grant_type=client_credentials

2. OpenID Провайдер проверяет client_id и client_secret.
3. OpenID Провайдер возвращает в ответ Access Token, если запрос успешно выполнен. Если OpenID Провайдер не смог выдать токен, то он вернет ответ с ошибкой. Формат ответа — JSON.

.. rubric:: Параметры ответа

.. csv-table:: 
    :header: "Параметр", "Описание"
    :widths: 10, 40

    "access_token","Токен доступа, который можно использовать для аутентификации в API продукта Контура"
    "token_type","Тип токена. Всегда возвращает значение ``Bearer``"
    "expires_in","Время жизни Access Token в секундах"

.. rubric:: Возможные ошибки
    
.. csv-table::
    :header: "Код", "Название ошибки", "Описание"
    :widths: 5, 10, 30

    400, "invalid_request", "Запрос составлен неверно"
    400, "invalid_client", "* Параметр client_secret или client_id не передан; |br|
    * Параметры client_secret или client_id переданы неверно"
    400, "invalid_scope", "- В запросе переданы несуществующие параметры; |br|
    - В запросе переданы параметры для аутентификации, например, |br| phone или email, без основного параметра openid"

**Пример успешного ответа**

::

    200 OK
    Content-Type: application/json;charset=UTF-8

    {
        "access_token":"AAAAAAAAAAAAAAAAA",
        "token_type":"Bearer",
        "expires_in":3600,
    }

**Пример ответа с ошибкой**

::
    
    HTTP/1.1 400 Bad Request
    Content-Type: application/json;charset=UTF-8

    {
        "error":"invalid_request"
    }

4. Приложение отправляет запрос к API продукта Контура с иcпользованием Access Token.
5. API продукта Контура проверяет Access Token и наличие доступов (scope) для приложения.
6. API продукта Контура передаёт данные приложению.